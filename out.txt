Hydra compiler, version 0.1
Copyright © 2020-2020 by Jesús Perea Villegas based in A. Ortiz Buttercup Compiler, ITESM CEM.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or later.
This program has absolutely no warranty.

Included in this release:
   * Lexical analysis

===== Tokens from: "code_samples/004_factorial.hydra" =====
[1] [IDENTIFIER, "iterative_factorial", @(7, 1)]
[2] [OPEN_PAR, "(", @(7, 20)]
[3] [IDENTIFIER, "n", @(7, 21)]
[4] [CLOSE_PAR, ")", @(7, 22)]
[5] [OPEN_CURLY, "{", @(7, 24)]
[6] [VAR, "var", @(8, 5)]
[7] [IDENTIFIER, "result", @(8, 9)]
[8] [COMMA, ",", @(8, 15)]
[9] [IDENTIFIER, "i", @(8, 17)]
[10] [EOL, ";", @(8, 18)]
[11] [IDENTIFIER, "result", @(9, 5)]
[12] [ASSIGN, "=", @(9, 12)]
[13] [INT_LITERAL, "1", @(9, 14)]
[14] [EOL, ";", @(9, 15)]
[15] [IDENTIFIER, "i", @(10, 5)]
[16] [ASSIGN, "=", @(10, 7)]
[17] [INT_LITERAL, "2", @(10, 9)]
[18] [EOL, ";", @(10, 10)]
[19] [WHILE, "while", @(11, 5)]
[20] [OPEN_PAR, "(", @(11, 11)]
[21] [IDENTIFIER, "i", @(11, 12)]
[22] [LESSEQUAL, "<=", @(11, 14)]
[23] [IDENTIFIER, "n", @(11, 17)]
[24] [CLOSE_PAR, ")", @(11, 18)]
[25] [OPEN_CURLY, "{", @(11, 20)]
[26] [IDENTIFIER, "result", @(12, 9)]
[27] [ASSIGN, "=", @(12, 16)]
[28] [IDENTIFIER, "result", @(12, 18)]
[29] [TIMES, "*", @(12, 25)]
[30] [IDENTIFIER, "i", @(12, 27)]
[31] [EOL, ";", @(12, 28)]
[32] [IDENTIFIER, "i", @(13, 9)]
[33] [PLUSPLUS, "++", @(13, 10)]
[34] [EOL, ";", @(13, 12)]
[35] [CLOSE_CURLY, "}", @(14, 5)]
[36] [RETURN, "return", @(15, 5)]
[37] [IDENTIFIER, "result", @(15, 12)]
[38] [EOL, ";", @(15, 18)]
[39] [CLOSE_CURLY, "}", @(16, 1)]
[40] [IDENTIFIER, "recursive_factorial", @(19, 1)]
[41] [OPEN_PAR, "(", @(19, 20)]
[42] [IDENTIFIER, "n", @(19, 21)]
[43] [CLOSE_PAR, ")", @(19, 22)]
[44] [OPEN_CURLY, "{", @(19, 24)]
[45] [IF, "if", @(20, 5)]
[46] [OPEN_PAR, "(", @(20, 8)]
[47] [IDENTIFIER, "n", @(20, 9)]
[48] [LESSEQUAL, "<=", @(20, 11)]
[49] [INT_LITERAL, "0", @(20, 14)]
[50] [CLOSE_PAR, ")", @(20, 15)]
[51] [OPEN_CURLY, "{", @(20, 17)]
[52] [RETURN, "return", @(21, 9)]
[53] [INT_LITERAL, "1", @(21, 16)]
[54] [EOL, ";", @(21, 17)]
[55] [CLOSE_CURLY, "}", @(22, 5)]
[56] [ELSE, "else", @(22, 7)]
[57] [OPEN_CURLY, "{", @(22, 12)]
[58] [RETURN, "return", @(23, 9)]
[59] [IDENTIFIER, "n", @(23, 16)]
[60] [TIMES, "*", @(23, 18)]
[61] [IDENTIFIER, "recursive_factorial", @(23, 20)]
[62] [OPEN_PAR, "(", @(23, 39)]
[63] [IDENTIFIER, "n", @(23, 40)]
[64] [NEG, "-", @(23, 42)]
[65] [INT_LITERAL, "1", @(23, 44)]
[66] [CLOSE_PAR, ")", @(23, 45)]
[67] [EOL, ";", @(23, 46)]
[68] [CLOSE_CURLY, "}", @(24, 5)]
[69] [CLOSE_CURLY, "}", @(25, 1)]
[70] [MAIN, "main", @(27, 1)]
[71] [OPEN_PAR, "(", @(27, 5)]
[72] [CLOSE_PAR, ")", @(27, 6)]
[73] [OPEN_CURLY, "{", @(27, 8)]
[74] [VAR, "var", @(28, 5)]
[75] [IDENTIFIER, "num", @(28, 9)]
[76] [COMMA, ",", @(28, 12)]
[77] [IDENTIFIER, "option", @(28, 14)]
[78] [EOL, ";", @(28, 20)]
[79] [WHILE, "while", @(29, 5)]
[80] [OPEN_PAR, "(", @(29, 11)]
[81] [TRUE, "true", @(29, 12)]
[82] [CLOSE_PAR, ")", @(29, 16)]
[83] [OPEN_CURLY, "{", @(29, 18)]
[84] [PRINTS, "prints", @(30, 9)]
[85] [OPEN_PAR, "(", @(30, 15)]
[86] [STRING_LITERAL, ""Input a number: "", @(30, 16)]
[87] [CLOSE_PAR, ")", @(30, 34)]
[88] [EOL, ";", @(30, 35)]
[89] [IDENTIFIER, "num", @(31, 9)]
[90] [ASSIGN, "=", @(31, 13)]
[91] [READI, "readi", @(31, 15)]
[92] [OPEN_PAR, "(", @(31, 20)]
[93] [CLOSE_PAR, ")", @(31, 21)]
[94] [EOL, ";", @(31, 22)]
[95] [PRINTS, "prints", @(32, 9)]
[96] [OPEN_PAR, "(", @(32, 15)]
[97] [STRING_LITERAL, ""Iterative factorial: "", @(32, 16)]
[98] [CLOSE_PAR, ")", @(32, 39)]
[99] [EOL, ";", @(32, 40)]
[100] [PRINTI, "printi", @(33, 9)]
[101] [OPEN_PAR, "(", @(33, 15)]
[102] [IDENTIFIER, "iterative_factorial", @(33, 16)]
[103] [OPEN_PAR, "(", @(33, 35)]
[104] [IDENTIFIER, "num", @(33, 36)]
[105] [CLOSE_PAR, ")", @(33, 39)]
[106] [CLOSE_PAR, ")", @(33, 40)]
[107] [EOL, ";", @(33, 41)]
[108] [PRINTLN, "println", @(34, 9)]
[109] [OPEN_PAR, "(", @(34, 16)]
[110] [CLOSE_PAR, ")", @(34, 17)]
[111] [EOL, ";", @(34, 18)]
[112] [PRINTS, "prints", @(35, 9)]
[113] [OPEN_PAR, "(", @(35, 15)]
[114] [STRING_LITERAL, ""Recursive factorial: "", @(35, 16)]
[115] [CLOSE_PAR, ")", @(35, 39)]
[116] [EOL, ";", @(35, 40)]
[117] [PRINTI, "printi", @(36, 9)]
[118] [OPEN_PAR, "(", @(36, 15)]
[119] [IDENTIFIER, "recursive_factorial", @(36, 16)]
[120] [OPEN_PAR, "(", @(36, 35)]
[121] [IDENTIFIER, "num", @(36, 36)]
[122] [CLOSE_PAR, ")", @(36, 39)]
[123] [CLOSE_PAR, ")", @(36, 40)]
[124] [EOL, ";", @(36, 41)]
[125] [PRINTLN, "println", @(37, 9)]
[126] [OPEN_PAR, "(", @(37, 16)]
[127] [CLOSE_PAR, ")", @(37, 17)]
[128] [EOL, ";", @(37, 18)]
[129] [PRINTS, "prints", @(38, 9)]
[130] [OPEN_PAR, "(", @(38, 15)]
[131] [STRING_LITERAL, ""Compute another factorial? "", @(38, 16)]
[132] [CLOSE_PAR, ")", @(38, 45)]
[133] [EOL, ";", @(38, 46)]
[134] [IDENTIFIER, "option", @(39, 9)]
[135] [ASSIGN, "=", @(39, 16)]
[136] [READS, "reads", @(39, 18)]
[137] [OPEN_PAR, "(", @(39, 23)]
[138] [CLOSE_PAR, ")", @(39, 24)]
[139] [EOL, ";", @(39, 25)]
[140] [IF, "if", @(40, 9)]
[141] [OPEN_PAR, "(", @(40, 12)]
[142] [SIZE, "size", @(40, 13)]
[143] [OPEN_PAR, "(", @(40, 17)]
[144] [IDENTIFIER, "option", @(40, 18)]
[145] [CLOSE_PAR, ")", @(40, 24)]
[146] [EQUALTO, "==", @(40, 26)]
[147] [INT_LITERAL, "0", @(40, 29)]
[148] [CLOSE_PAR, ")", @(40, 30)]
[149] [OPEN_CURLY, "{", @(40, 32)]
[150] [IDENTIFIER, "option", @(41, 13)]
[151] [ASSIGN, "=", @(41, 20)]
[152] [CHAR_LITERAL, "'N'", @(41, 22)]
[153] [EOL, ";", @(41, 25)]
[154] [CLOSE_CURLY, "}", @(42, 9)]
[155] [ELSE, "else", @(42, 11)]
[156] [OPEN_CURLY, "{", @(42, 16)]
[157] [IDENTIFIER, "option", @(43, 13)]
[158] [ASSIGN, "=", @(43, 20)]
[159] [GET, "get", @(43, 22)]
[160] [OPEN_PAR, "(", @(43, 25)]
[161] [IDENTIFIER, "option", @(43, 26)]
[162] [COMMA, ",", @(43, 32)]
[163] [INT_LITERAL, "0", @(43, 34)]
[164] [CLOSE_PAR, ")", @(43, 35)]
[165] [EOL, ";", @(43, 36)]
[166] [CLOSE_CURLY, "}", @(44, 9)]
[167] [IF, "if", @(45, 9)]
[168] [OPEN_PAR, "(", @(45, 12)]
[169] [IDENTIFIER, "option", @(45, 13)]
[170] [NOTEQUALTO, "!=", @(45, 20)]
[171] [CHAR_LITERAL, "'Y'", @(45, 23)]
[172] [AND, "&&", @(45, 27)]
[173] [IDENTIFIER, "option", @(45, 30)]
[174] [NOTEQUALTO, "!=", @(45, 37)]
[175] [CHAR_LITERAL, "'y'", @(45, 40)]
[176] [CLOSE_PAR, ")", @(45, 43)]
[177] [OPEN_CURLY, "{", @(45, 45)]
[178] [BREAK, "break", @(46, 13)]
[179] [EOL, ";", @(46, 18)]
[180] [CLOSE_CURLY, "}", @(47, 9)]
[181] [CLOSE_CURLY, "}", @(48, 5)]
[182] [CLOSE_CURLY, "}", @(49, 1)]
[183] [EOF, "", @(49, 2)]
