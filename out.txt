Hydra compiler, version 0.1
Copyright © 2020-2020 by Jesús Perea Villegas based in A. Ortiz Buttercup Compiler, ITESM CEM.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or later.
This program has absolutely no warranty.

Included in this release:
   * Lexical analysis

===== Tokens from: "code_samples/007_literals.hydra" =====
[1] [VAR, "var", @(7, 1)]
[2] [ID, "fails", @(7, 5)]
[3] [EOL, ";", @(7, 10)]
[4] [ID, "assert", @(9, 1)]
[5] [OPEN_PAR, "(", @(9, 7)]
[6] [ID, "value1", @(9, 8)]
[7] [COMMA, ",", @(9, 14)]
[8] [ID, "value2", @(9, 16)]
[9] [COMMA, ",", @(9, 22)]
[10] [ID, "message", @(9, 24)]
[11] [CLOSE_PAR, ")", @(9, 31)]
[12] [OPEN_CURLY, "{", @(9, 33)]
[13] [IF, "if", @(10, 5)]
[14] [OPEN_PAR, "(", @(10, 8)]
[15] [ID, "value1", @(10, 9)]
[16] [NOTEQUALTO, "!=", @(10, 16)]
[17] [ID, "value2", @(10, 19)]
[18] [CLOSE_PAR, ")", @(10, 25)]
[19] [OPEN_CURLY, "{", @(10, 27)]
[20] [ID, "fails", @(11, 9)]
[21] [ASSIGN, "=", @(11, 15)]
[22] [ID, "fails", @(11, 17)]
[23] [PLUS, "+", @(11, 23)]
[24] [LIT_INT, "1", @(11, 25)]
[25] [EOL, ";", @(11, 26)]
[26] [PRINTS, "prints", @(12, 9)]
[27] [OPEN_PAR, "(", @(12, 15)]
[28] [LIT_STR, ""Assertion failure: "", @(12, 16)]
[29] [CLOSE_PAR, ")", @(12, 37)]
[30] [EOL, ";", @(12, 38)]
[31] [PRINTS, "prints", @(13, 9)]
[32] [OPEN_PAR, "(", @(13, 15)]
[33] [ID, "message", @(13, 16)]
[34] [CLOSE_PAR, ")", @(13, 23)]
[35] [EOL, ";", @(13, 24)]
[36] [PRINTLN, "println", @(14, 9)]
[37] [OPEN_PAR, "(", @(14, 16)]
[38] [CLOSE_PAR, ")", @(14, 17)]
[39] [EOL, ";", @(14, 18)]
[40] [CLOSE_CURLY, "}", @(15, 5)]
[41] [CLOSE_CURLY, "}", @(16, 1)]
[42] [MAIN, "main", @(18, 1)]
[43] [OPEN_PAR, "(", @(18, 5)]
[44] [CLOSE_PAR, ")", @(18, 6)]
[45] [OPEN_CURLY, "{", @(18, 8)]
[46] [VAR, "var", @(19, 5)]
[47] [ID, "s", @(19, 9)]
[48] [COMMA, ",", @(19, 10)]
[49] [ID, "a", @(19, 12)]
[50] [COMMA, ",", @(19, 13)]
[51] [ID, "i", @(19, 15)]
[52] [COMMA, ",", @(19, 16)]
[53] [ID, "n", @(19, 18)]
[54] [EOL, ";", @(19, 19)]
[55] [ID, "fails", @(20, 5)]
[56] [ASSIGN, "=", @(20, 11)]
[57] [LIT_INT, "0", @(20, 13)]
[58] [EOL, ";", @(20, 14)]
[59] [ID, "assert", @(21, 5)]
[60] [OPEN_PAR, "(", @(21, 11)]
[61] [BAD_TOKEN, "'", @(21, 12)]
[62] [LIT_CHAR, "\n", @(21, 13)]
[63] [BAD_TOKEN, "'", @(21, 15)]
[64] [COMMA, ",", @(21, 16)]
[65] [LIT_INT, "10", @(21, 18)]
[66] [COMMA, ",", @(21, 20)]
[67] [LIT_STR, ""error in newline literal"", @(21, 22)]
[68] [CLOSE_PAR, ")", @(21, 48)]
[69] [EOL, ";", @(21, 49)]
[70] [ID, "assert", @(22, 5)]
[71] [OPEN_PAR, "(", @(22, 11)]
[72] [BAD_TOKEN, "'", @(22, 12)]
[73] [LIT_CHAR, "\r", @(22, 13)]
[74] [BAD_TOKEN, "'", @(22, 15)]
[75] [COMMA, ",", @(22, 16)]
[76] [LIT_INT, "13", @(22, 18)]
[77] [COMMA, ",", @(22, 20)]
[78] [LIT_STR, ""error in carriage return literal"", @(22, 22)]
[79] [CLOSE_PAR, ")", @(22, 56)]
[80] [EOL, ";", @(22, 57)]
[81] [ID, "assert", @(23, 5)]
[82] [OPEN_PAR, "(", @(23, 11)]
[83] [BAD_TOKEN, "'", @(23, 12)]
[84] [LIT_CHAR, "\t", @(23, 13)]
[85] [BAD_TOKEN, "'", @(23, 15)]
[86] [COMMA, ",", @(23, 16)]
[87] [LIT_INT, "9", @(23, 18)]
[88] [COMMA, ",", @(23, 19)]
[89] [LIT_STR, ""error in tab literal"", @(23, 21)]
[90] [CLOSE_PAR, ")", @(23, 43)]
[91] [EOL, ";", @(23, 44)]
[92] [ID, "assert", @(24, 5)]
[93] [OPEN_PAR, "(", @(24, 11)]
[94] [BAD_TOKEN, "'", @(24, 12)]
[95] [LIT_CHAR, "\\", @(24, 13)]
[96] [BAD_TOKEN, "'", @(24, 15)]
[97] [COMMA, ",", @(24, 16)]
[98] [LIT_INT, "92", @(24, 18)]
[99] [COMMA, ",", @(24, 20)]
[100] [LIT_STR, ""error in backslash literal"", @(24, 22)]
[101] [CLOSE_PAR, ")", @(24, 50)]
[102] [EOL, ";", @(24, 51)]
[103] [ID, "assert", @(25, 5)]
[104] [OPEN_PAR, "(", @(25, 11)]
[105] [LIT_CHAR, "'\'", @(25, 12)]
[106] [BAD_TOKEN, "'", @(25, 15)]
[107] [COMMA, ",", @(25, 16)]
[108] [LIT_INT, "39", @(25, 18)]
[109] [COMMA, ",", @(25, 20)]
[110] [LIT_STR, ""error in single quote literal"", @(25, 22)]
[111] [CLOSE_PAR, ")", @(25, 53)]
[112] [EOL, ";", @(25, 54)]
[113] [ID, "assert", @(26, 5)]
[114] [OPEN_PAR, "(", @(26, 11)]
[115] [BAD_TOKEN, "'", @(26, 12)]
[116] [LIT_CHAR, "\"", @(26, 13)]
[117] [BAD_TOKEN, "'", @(26, 15)]
[118] [COMMA, ",", @(26, 16)]
[119] [LIT_INT, "34", @(26, 18)]
[120] [COMMA, ",", @(26, 20)]
[121] [LIT_STR, ""error in double quote literal"", @(26, 22)]
[122] [CLOSE_PAR, ")", @(26, 53)]
[123] [EOL, ";", @(26, 54)]
[124] [ID, "assert", @(27, 5)]
[125] [OPEN_PAR, "(", @(27, 11)]
[126] [BAD_TOKEN, "'", @(27, 12)]
[127] [LIT_CHAR, "\u000041", @(27, 13)]
[128] [BAD_TOKEN, "'", @(27, 21)]
[129] [COMMA, ",", @(27, 22)]
[130] [LIT_CHAR, "'A'", @(27, 24)]
[131] [COMMA, ",", @(27, 27)]
[132] [LIT_STR, ""error in letter A literal code point"", @(27, 29)]
[133] [CLOSE_PAR, ")", @(27, 67)]
[134] [EOL, ";", @(27, 68)]
[135] [ID, "assert", @(28, 5)]
[136] [OPEN_PAR, "(", @(28, 11)]
[137] [BAD_TOKEN, "'", @(28, 12)]
[138] [LIT_CHAR, "\u0020AC", @(28, 13)]
[139] [BAD_TOKEN, "'", @(28, 21)]
[140] [COMMA, ",", @(28, 22)]
[141] [LIT_INT, "8364", @(28, 24)]
[142] [COMMA, ",", @(28, 28)]
[143] [LIT_STR, ""error in euro literal code point"", @(28, 30)]
[144] [CLOSE_PAR, ")", @(28, 64)]
[145] [EOL, ";", @(28, 65)]
[146] [ID, "s", @(29, 5)]
[147] [ASSIGN, "=", @(29, 7)]
[148] [LIT_STR, ""\u0000A1\u0020ACste ni\u0000F1o \u0020ACst\u0000E1 bien \u0000D1o\u0000F1o!\n"", @(29, 9)]
[149] [EOL, ";", @(29, 88)]
[150] [ID, "a", @(30, 5)]
[151] [ASSIGN, "=", @(30, 7)]
[152] [OPEN_BRAC, "[", @(30, 9)]
[153] [LIT_INT, "161", @(30, 10)]
[154] [COMMA, ",", @(30, 13)]
[155] [LIT_INT, "8364", @(30, 15)]
[156] [COMMA, ",", @(30, 19)]
[157] [LIT_INT, "115", @(30, 21)]
[158] [COMMA, ",", @(30, 24)]
[159] [LIT_INT, "116", @(30, 26)]
[160] [COMMA, ",", @(30, 29)]
[161] [LIT_INT, "101", @(30, 31)]
[162] [COMMA, ",", @(30, 34)]
[163] [LIT_INT, "32", @(30, 36)]
[164] [COMMA, ",", @(30, 38)]
[165] [LIT_INT, "110", @(30, 40)]
[166] [COMMA, ",", @(30, 43)]
[167] [LIT_INT, "105", @(30, 45)]
[168] [COMMA, ",", @(30, 48)]
[169] [LIT_INT, "241", @(30, 50)]
[170] [COMMA, ",", @(30, 53)]
[171] [LIT_INT, "111", @(30, 55)]
[172] [COMMA, ",", @(30, 58)]
[173] [LIT_INT, "32", @(30, 60)]
[174] [COMMA, ",", @(30, 62)]
[175] [LIT_INT, "8364", @(30, 64)]
[176] [COMMA, ",", @(30, 68)]
[177] [LIT_INT, "115", @(30, 70)]
[178] [COMMA, ",", @(30, 73)]
[179] [LIT_INT, "116", @(30, 75)]
[180] [COMMA, ",", @(30, 78)]
[181] [LIT_INT, "225", @(31, 10)]
[182] [COMMA, ",", @(31, 13)]
[183] [LIT_INT, "32", @(31, 15)]
[184] [COMMA, ",", @(31, 17)]
[185] [LIT_INT, "98", @(31, 19)]
[186] [COMMA, ",", @(31, 21)]
[187] [LIT_INT, "105", @(31, 23)]
[188] [COMMA, ",", @(31, 26)]
[189] [LIT_INT, "101", @(31, 28)]
[190] [COMMA, ",", @(31, 31)]
[191] [LIT_INT, "110", @(31, 33)]
[192] [COMMA, ",", @(31, 36)]
[193] [LIT_INT, "32", @(31, 38)]
[194] [COMMA, ",", @(31, 40)]
[195] [LIT_INT, "209", @(31, 42)]
[196] [COMMA, ",", @(31, 45)]
[197] [LIT_INT, "111", @(31, 47)]
[198] [COMMA, ",", @(31, 50)]
[199] [LIT_INT, "241", @(31, 52)]
[200] [COMMA, ",", @(31, 55)]
[201] [LIT_INT, "111", @(31, 57)]
[202] [COMMA, ",", @(31, 60)]
[203] [LIT_INT, "33", @(31, 62)]
[204] [COMMA, ",", @(31, 64)]
[205] [LIT_INT, "10", @(31, 66)]
[206] [CLOSE_BRAC, "]", @(31, 68)]
[207] [EOL, ";", @(31, 69)]
[208] [ID, "i", @(32, 5)]
[209] [ASSIGN, "=", @(32, 7)]
[210] [LIT_INT, "0", @(32, 9)]
[211] [EOL, ";", @(32, 10)]
[212] [ID, "n", @(33, 5)]
[213] [ASSIGN, "=", @(33, 7)]
[214] [SIZE, "size", @(33, 9)]
[215] [OPEN_PAR, "(", @(33, 13)]
[216] [ID, "s", @(33, 14)]
[217] [CLOSE_PAR, ")", @(33, 15)]
[218] [EOL, ";", @(33, 16)]
[219] [WHILE, "while", @(34, 5)]
[220] [OPEN_PAR, "(", @(34, 11)]
[221] [ID, "i", @(34, 12)]
[222] [LESS, "<", @(34, 14)]
[223] [ID, "n", @(34, 16)]
[224] [CLOSE_PAR, ")", @(34, 17)]
[225] [OPEN_CURLY, "{", @(34, 19)]
[226] [ID, "assert", @(35, 9)]
[227] [OPEN_PAR, "(", @(35, 15)]
[228] [GET, "get", @(35, 16)]
[229] [OPEN_PAR, "(", @(35, 19)]
[230] [ID, "a", @(35, 20)]
[231] [COMMA, ",", @(35, 21)]
[232] [ID, "i", @(35, 23)]
[233] [CLOSE_PAR, ")", @(35, 24)]
[234] [COMMA, ",", @(35, 25)]
[235] [GET, "get", @(35, 27)]
[236] [OPEN_PAR, "(", @(35, 30)]
[237] [ID, "s", @(35, 31)]
[238] [COMMA, ",", @(35, 32)]
[239] [ID, "i", @(35, 34)]
[240] [CLOSE_PAR, ")", @(35, 35)]
[241] [COMMA, ",", @(35, 36)]
[242] [LIT_STR, ""error in string literal"", @(35, 38)]
[243] [CLOSE_PAR, ")", @(35, 63)]
[244] [EOL, ";", @(35, 64)]
[245] [ID, "i", @(36, 9)]
[246] [PLUSPLUS, "++", @(36, 10)]
[247] [EOL, ";", @(36, 12)]
[248] [CLOSE_CURLY, "}", @(37, 5)]
[249] [PRINTI, "printi", @(38, 5)]
[250] [OPEN_PAR, "(", @(38, 11)]
[251] [ID, "fails", @(38, 12)]
[252] [CLOSE_PAR, ")", @(38, 17)]
[253] [EOL, ";", @(38, 18)]
[254] [PRINTS, "prints", @(39, 5)]
[255] [OPEN_PAR, "(", @(39, 11)]
[256] [LIT_STR, "" assertion failure(s) found."", @(39, 12)]
[257] [CLOSE_PAR, ")", @(39, 42)]
[258] [EOL, ";", @(39, 43)]
[259] [PRINTLN, "println", @(40, 5)]
[260] [OPEN_PAR, "(", @(40, 12)]
[261] [CLOSE_PAR, ")", @(40, 13)]
[262] [EOL, ";", @(40, 14)]
[263] [PRINTS, "prints", @(41, 5)]
[264] [OPEN_PAR, "(", @(41, 11)]
[265] [ID, "a", @(41, 12)]
[266] [CLOSE_PAR, ")", @(41, 13)]
[267] [EOL, ";", @(41, 14)]
[268] [CLOSE_CURLY, "}", @(42, 1)]
[269] [EOF, "", @(42, 1)]
